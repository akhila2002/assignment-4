1.Write a C program to print preorder,inorder and postorder traversal on Binary Tree.

#include<stdio.h>
#include<stdlib.h>
struct node
{
   int data;
   struct node*left;
   struct node*right;
};
struct node*newNode(int data)
{
    struct node*node=(struct node*)malloc(sizeof(struct node));
    node->data=data;
    node->left=NULL;
    node->right=NULL;
     
    return(node);
}
void printPostorder(struct node*node)
{
   if(node==NULL)
   return;
   printPostorder(node->left);
   printPostorder(node->right);

   print("%d",node->data);
}
void printInorder(struct node*node)
{
     if(node==NULL)
     return;
     printInorder(node->left);
     
     print("%d",node->data);
     
     printInorder(node->right);
}
void printPreorder(struct node*node)
{
     if(node==NULL)
     return;

     print("%d",node->data);
     
     printPreorder(node->left);
     printPreorder(node->right);
}
int main()
{
     struct node*root = newNode(1);
     root->left = newNode(2);
     root->right = newNode(3);
     root->left->left = newNode(4);
     root->left->right = newNode(5);

     print("\nPreorder of binary tree is \n");
     printPreorder(root);
    
     printf("\nInorder of binary tree is \n");
     printInorder(root);

     printf("\nPostorder of binary tree is \n");
     printPostorder(root);
     
     getchar();
     return 0;
}
Output 1

Preorder of binary tree is
1 2 4 5 3
Inorder of binary tree is
4 2 5 1 3
Postorder of binary tree is
4 5 2 3 1

2.Write a C program to create(or insert)and inorder traversal on Binary Search Tree.


#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node*left;
    struct node*right;
   
};

struct node*newNode(int item)
{
    struct node*temp=(struct node*)malloc(sizeof(struct node));
    temp->data=item;
    temp->left=temp->right=NULL;
    return temp;
   
}


struct node*insert(struct node *node,int valve)
{
 if(node==NULL)return newNode(valve);
    if (valve<node->data)
      node->left=insert(node->left,valve);
    else if (valve>node->data)
      node->right=insert(node->right,valve);
    return node;  
}


void inorder(struct node* root){
    if(root==NULL)return;
    inorder(root->left);
    printf("%d->",root->data);
    inorder(root->right);
}    



void main()
{
    struct node*root=NULL;
    root=insert(root,25);
    insert(root,48);
    insert(root,14);
    insert(root,65);
    insert(root,28);
    insert(root,36);
    insert(root,42);
  printf("\ninorder traversal\n");    
   inorder(root);
   
}

Output2

14

25

28

36

42

48

65


3.Write a C program for linear search algorithm.

#include<stdio.h>
int main()
{
  int array[100],search,c,n;

  printf("Enter number of elements in array\n");
  scanf("%d",&n);

  printf("Enter %d integer(s)\n",n);

  for(c=0;c<n;c++)
    scanf("%d",&array[c]);

  printf("Enter a number to search\n");
  scanf("%d",&search);

  for(c=0;c<n;c++);
  {
    if(array[c]==search)
     {
       printf("%d is present at location %d\n",search,c+1);
       break;
      }
   }
   if(c==n)
      printf("%d isn't present in the array\n",search);
     
   return 0;
}

Output3

Enter number of elements in array
5

Enter 5 integer(s)
25

14

36

95

38

Enter a number to search
95
95 is present at location 4.


4.Write a C program for Binary Search algorithm.

#include<stdio.h>
int main()
{
    int c,first,last,middle,n,search,array[100];
    printf("enter number of elements\n");
    scanf("%d",&n);
    printf("enter  integers\n");
    for(c=0;c<n;c++)
    scanf("%d",&array[c]);
    printf("enter value to find \n");
    scanf("%d",&search);
    first=0;
    last=n-1;
    middle=(first+last)/2;
    while(first<=last)
    {
        if(array[middle]<search)
        {
         first=middle+1;
        }
        else if(array[middle]==search)
        {
            printf("%d found at location %d.\n",search,middle+1);
            break;
        }
        else
        {
         last=middle-1;
         middle=(first+last)/2;
        }
    }
    if(first>last)
    {
        printf("not found%d isn't present in the list.\n",search);
        return 0;
    }
}

Output4
Enter number of elements
5
Enter 5 integers
25
36
41
51
95
51 found at location 4.


    





